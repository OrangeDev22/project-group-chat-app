[{"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\index.js":"1","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\App.js":"2","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\reportWebVitals.js":"3","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\app\\store.js":"4","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\features\\user.js":"5","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\Login.js":"6","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\Register.js":"7","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\contexts\\SocketProvider.js":"8","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\Dashboard.js":"9","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\features\\app.js":"10","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\features\\friendsSlice.js":"11","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\SideBar.js":"12","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\OpenConversation.js":"13","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\FriendRequestList.js":"14","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\Settings.js":"15","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\BlockedList.js":"16","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\PendingRequestsList.js":"17","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\utils\\useFetch.js":"18","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\hooks\\useLocalStorage.js":"19","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\ConversationsList.js":"20","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\FriendsList.js":"21"},{"size":598,"mtime":1610432363698,"results":"22","hashOfConfig":"23"},{"size":2372,"mtime":1610996712606,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":332,"mtime":1610575296489,"results":"26","hashOfConfig":"23"},{"size":457,"mtime":1610492089296,"results":"27","hashOfConfig":"23"},{"size":3692,"mtime":1610814729214,"results":"28","hashOfConfig":"23"},{"size":4630,"mtime":1610570650445,"results":"29","hashOfConfig":"23"},{"size":621,"mtime":1610402770428,"results":"30","hashOfConfig":"23"},{"size":7969,"mtime":1611123642694,"results":"31","hashOfConfig":"23"},{"size":1291,"mtime":1611109426692,"results":"32","hashOfConfig":"23"},{"size":3370,"mtime":1610916125555,"results":"33","hashOfConfig":"23"},{"size":9823,"mtime":1611121329893,"results":"34","hashOfConfig":"23"},{"size":4979,"mtime":1611119369180,"results":"35","hashOfConfig":"23"},{"size":6448,"mtime":1610857082771,"results":"36","hashOfConfig":"23"},{"size":1488,"mtime":1613339501751,"results":"37","hashOfConfig":"23"},{"size":3382,"mtime":1610832586625,"results":"38","hashOfConfig":"23"},{"size":4208,"mtime":1610836820637,"results":"39","hashOfConfig":"23"},{"size":2782,"mtime":1611125611632,"results":"40","hashOfConfig":"23"},{"size":660,"mtime":1609810396774,"results":"41","hashOfConfig":"23"},{"size":2581,"mtime":1611030289867,"results":"42","hashOfConfig":"23"},{"size":5678,"mtime":1611125601328,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"asy0ht",{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"46"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"46"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\index.js",[],["100","101"],"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\App.js",["102","103","104"],"import React, { useState, useEffect } from \"react\";\nimport { ThemeProvider, createMuiTheme } from \"@material-ui/core\";\nimport { purple, red, green, deepPurple } from \"@material-ui/core/colors\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { login, selectUser } from \"./features/user\";\nimport \"./App.css\";\nimport Register from \"./components/Register\";\nimport Login from \"./components/Login\";\nimport Dashboard from \"./components/Dashboard\";\nimport \"fontsource-roboto\";\nimport { SocketProvider } from \"./contexts/SocketProvider\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: deepPurple[400],\n    },\n    secondary: {\n      main: red[500],\n    },\n    type: \"dark\",\n  },\n});\n\nfunction App() {\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n  const [loading, setLoading] = useState(true);\n  const [id, setId] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        let response = await fetch(\"http://localhost:5000/user\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        let data = await response.json();\n\n        if (data != null) {\n          dispatch(\n            login({\n              email: data.email,\n              name: data.user_name,\n              user_id: data.user_id,\n              id: data.id,\n            })\n          );\n        }\n      } catch (error) {\n        console.error(error);\n      }\n\n      setLoading(false);\n    }\n\n    fetchData();\n  }, []);\n\n  useEffect(() => {\n    if (user.user !== null) setId(user.user.user_id);\n  }, [user.user]);\n  // const [id, setId] = useLocalStorage(\"id\");\n  // const [name, setName] = useLocalStorage(\"name\");\n\n  if (loading) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={theme}>\n        <SocketProvider id={id}>\n          <Router>\n            <Switch>\n              <Route exact path=\"/\">\n                <Login />\n              </Route>\n              <Route path=\"/register\">\n                <Register />\n              </Route>\n              <Route path=\"/dashboard/:conversationId?\">\n                <Dashboard />\n              </Route>\n            </Switch>\n          </Router>\n        </SocketProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\app\\store.js",[],"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\features\\user.js",[],"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\Login.js",["105","106"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { login } from \"../features/user\";\r\nimport { selectUser } from \"../features/user\";\r\nimport { Button, TextField, InputAdornment } from \"@material-ui/core\";\r\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\r\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport \"../css/Login.css\";\r\n\r\nfunction Login() {\r\n  let history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n  const emailRef = useRef();\r\n  const passwordRef = useRef();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const body = {\r\n      email: emailRef.current.value,\r\n      password: passwordRef.current.value,\r\n    };\r\n    let response = await fetch(\"http://localhost:5000/login\", {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      credentials: \"include\",\r\n      body: JSON.stringify(body),\r\n    });\r\n    let data = await response.json();\r\n\r\n    if (data.message === \"Authenticated\") {\r\n      dispatch(\r\n        login({\r\n          email: data.user.email,\r\n          name: data.user.name,\r\n          user_id: data.user.user_id,\r\n          id: data.user.id,\r\n        })\r\n      );\r\n      window.location.replace(\"/dashboard\");\r\n    } else {\r\n      setError(true);\r\n      setErrorMessage(data.message);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user.user != null) {\r\n      window.location.replace(\"/dashboard\");\r\n    }\r\n  }, []);\r\n\r\n  if (user.user != null) {\r\n    return <></>;\r\n  }\r\n  return (\r\n    <div className=\"login\">\r\n      <LockOpenIcon\r\n        className=\"login-icon\"\r\n        style={{\r\n          margin: \"10px\",\r\n          alignSelf: \"center\",\r\n          backgroundColor: \"#7e57c2\",\r\n          padding: \"10px\",\r\n          borderRadius: \"50%\",\r\n        }}\r\n      />\r\n      <form\r\n        className=\"login-form\"\r\n        action=\"submit\"\r\n        onSubmit={(e) => handleSubmit(e)}\r\n      >\r\n        <div className=\"login-errors\">\r\n          <p className=\"login-element error\">{errorMessage}</p>\r\n        </div>\r\n        <TextField\r\n          className=\"login-element\"\r\n          placeholder=\"Email\"\r\n          inputRef={emailRef}\r\n          error={error}\r\n          variant=\"outlined\"\r\n        />\r\n        <TextField\r\n          className=\"login-element\"\r\n          placeholder=\"password\"\r\n          variant=\"outlined\"\r\n          inputRef={passwordRef}\r\n          error={error}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment\r\n                position=\"end\"\r\n                className=\"show-button\"\r\n                onClick={() => setShowPassword(!showPassword)}\r\n              >\r\n                {showPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n          type={showPassword ? \"text\" : \"password\"}\r\n        />\r\n        <div className=\"login-element\">\r\n          Need a new account?\r\n          <a href=\"/register\" className=\"link\">\r\n            {\" \"}\r\n            Register here :)\r\n          </a>\r\n        </div>\r\n        <Button\r\n          className=\"login-element\"\r\n          variant=\"contained\"\r\n          type=\"submit\"\r\n          color=\"primary\"\r\n          size=\"large\"\r\n        >\r\n          Log in\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\Register.js",[],"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\contexts\\SocketProvider.js",[],"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\Dashboard.js",["107","108"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport SideBar from \"./SideBar\";\r\nimport { useSocket } from \"../contexts/SocketProvider\";\r\nimport OpenConversation from \"./OpenConversation\";\r\nimport { selectUser, logout } from \"../features/user\";\r\nimport FriendRequestList from \"./FriendRequestList\";\r\nimport {\r\n  selectApp,\r\n  selectConversations,\r\n  addMessageinConversation,\r\n  addConversation,\r\n  setConversations,\r\n  setSelectedConversation,\r\n} from \"../features/app\";\r\nimport Setttings from \"./Settings\";\r\nimport {\r\n  fetchFriends,\r\n  fetchRequests,\r\n  fetchBlockedRelationships,\r\n} from \"../utils/useFetch\";\r\nimport BlockedList from \"./BlockedList\";\r\nimport {\r\n  selectFriends,\r\n  addFriendRequest,\r\n  setFriends,\r\n  setFriendRequests,\r\n  resetFriendRequests,\r\n  resetPendingRequests,\r\n  setPendingRequests,\r\n  deleteRelationship,\r\n  setBlockedUsers,\r\n  removeAll,\r\n} from \"../features/friendsSlice\";\r\nimport \"../css/Dashboard.css\";\r\nimport PenddingRequests from \"./PendingRequestsList\";\r\n\r\nconst PREFIX = \"groupchat-\";\r\n\r\nfunction Dashboard() {\r\n  let history = useHistory();\r\n  const app = useSelector(selectApp);\r\n  const user = useSelector(selectUser);\r\n  const conversations = useSelector(selectConversations);\r\n  const friends = useSelector(selectFriends);\r\n  const { conversationId } = useParams();\r\n  const [selectedButton, setSelectedButton] = useState(2);\r\n  const [name, setName] = useState(\"\");\r\n  const [userId, setUserId] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const socket = useSocket();\r\n  const key = user.user && `messages-${user.user.id}`;\r\n  const prefixedKey = PREFIX + key;\r\n\r\n  useEffect(() => {\r\n    const loadRequests = async () => {\r\n      const friendsList = await fetchFriends(user.user.id, 20, 1, +new Date());\r\n      const jsonValue = localStorage.getItem(prefixedKey);\r\n      const jsonObject = await JSON.parse(jsonValue);\r\n      if (jsonValue != null) {\r\n        dispatch(setConversations(jsonObject));\r\n      }\r\n\r\n      const FriendsRequests = await fetchRequests(\r\n        user.user.id,\r\n        20,\r\n        1,\r\n        \"friend_request\",\r\n        +new Date()\r\n      );\r\n      const PenddingRequests = await fetchRequests(\r\n        user.user.id,\r\n        20,\r\n        1,\r\n        \"pending_second_first\",\r\n        +new Date()\r\n      );\r\n      const BlockedUsers = await fetchBlockedRelationships(user.user.id);\r\n\r\n      if (friendsList) {\r\n        dispatch(setFriends(friendsList));\r\n      }\r\n      if (FriendsRequests) {\r\n        dispatch(setFriendRequests(FriendsRequests));\r\n      }\r\n      if (PenddingRequests) {\r\n        dispatch(setPendingRequests(PenddingRequests));\r\n      }\r\n      if (BlockedUsers) {\r\n        dispatch(setBlockedUsers(BlockedUsers));\r\n      }\r\n    };\r\n\r\n    if (user.user !== null) {\r\n      setName(user.user.name);\r\n      setUserId(user.user.user_id);\r\n      loadRequests();\r\n    } else {\r\n      history.push(\"/\");\r\n    }\r\n  }, []);\r\n\r\n  const changeButtonHandler = (newButton) => {\r\n    if (selectedButton === 0) {\r\n      if (friends.friendRequests.length > 20) {\r\n        dispatch(resetFriendRequests());\r\n      }\r\n    }\r\n    if (selectedButton === 1) {\r\n      if (friends.pendingRequests.length > 20) {\r\n        dispatch(resetPendingRequests());\r\n      }\r\n    }\r\n    setSelectedButton(newButton);\r\n  };\r\n\r\n  const handleLogout = async () => {\r\n    let response = await fetch(\"http://localhost:5000/logout\", {\r\n      method: \"GET\",\r\n      credentials: \"include\",\r\n    });\r\n    let data = await response.json();\r\n    if (data.message === \"logged out\") {\r\n      dispatch(logout());\r\n      dispatch(removeAll());\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\r\n      \"receiveMessage\",\r\n      ({ recipients, sender, text, conversationId }) => {\r\n        let found = false;\r\n        for (let i = 0; i < conversations.length; i++) {\r\n          if (conversations[i].id === conversationId) {\r\n            found = true;\r\n            dispatch(\r\n              addMessageinConversation({ senderName: sender, text, index: i })\r\n            );\r\n            break;\r\n          }\r\n        }\r\n        if (!found) {\r\n          dispatch(\r\n            addConversation({\r\n              id: conversationId,\r\n              recipients,\r\n              messages: [{ sender, text }],\r\n            })\r\n          );\r\n          if (app.selectedConversationIndex !== -1) {\r\n            dispatch(\r\n              setSelectedConversation(app.selectedConversationIndex + 1)\r\n            );\r\n          }\r\n        }\r\n      }\r\n    );\r\n\r\n    socket.on(\"relationshipDeleted\", (relationshipId, type) => {\r\n      console.log(\"type\", type);\r\n      dispatch(\r\n        deleteRelationship({\r\n          relationshipId,\r\n          type,\r\n        })\r\n      );\r\n    });\r\n\r\n    socket.on(\"receiveFriendRequest\", function (senderName, id) {\r\n      dispatch(\r\n        addFriendRequest({\r\n          newFriendRequest: {\r\n            name: senderName,\r\n            id,\r\n          },\r\n        })\r\n      );\r\n    });\r\n    return () => {\r\n      socket.off(\"receiveMessage\");\r\n      socket.off(\"receiveFriendRequest\");\r\n      socket.off(\"relationshipDeleted\");\r\n    };\r\n  }, [socket, app, conversations]);\r\n\r\n  useEffect(() => {\r\n    if (conversations.length > 0) {\r\n      localStorage.setItem(prefixedKey, JSON.stringify(conversations));\r\n    }\r\n  }, [conversations, prefixedKey]);\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <SideBar name={name} user_id={userId} />\r\n      {!conversationId && (\r\n        <div className=\"dashboard-panel-right\">\r\n          <div className=\"dashboard-buttons-container\">\r\n            <div className=\"dashboard-buttongroup\">\r\n              <Button\r\n                style={{ marginRight: 10 }}\r\n                size={\"small\"}\r\n                className=\"dashboard-buttongroup-button\"\r\n                variant={selectedButton === 0 ? \"contained\" : \"text\"}\r\n                onClick={() => changeButtonHandler(0)}\r\n              >\r\n                Requests\r\n              </Button>\r\n              <Button\r\n                style={{ marginRight: 10 }}\r\n                size={\"small\"}\r\n                className=\"dashboard-buttongroup-button\"\r\n                variant={selectedButton === 1 ? \"contained\" : \"text\"}\r\n                onClick={() => changeButtonHandler(1)}\r\n              >\r\n                Pending\r\n              </Button>\r\n              <Button\r\n                size={\"small\"}\r\n                style={{ marginRight: 10 }}\r\n                className=\"dashboard-buttongroup-button\"\r\n                variant={selectedButton === 2 ? \"contained\" : \"text\"}\r\n                onClick={() => changeButtonHandler(2)}\r\n              >\r\n                Blocked\r\n              </Button>\r\n\r\n              <Button\r\n                size={\"small\"}\r\n                style={{ marginRight: 10 }}\r\n                className=\"dashboard-buttongroup-button\"\r\n                variant={selectedButton === 3 ? \"contained\" : \"text\"}\r\n                onClick={() => changeButtonHandler(3)}\r\n              >\r\n                Settings\r\n              </Button>\r\n\r\n              <Button\r\n                size={\"small\"}\r\n                style={{ marginRight: 10 }}\r\n                className=\"dashboard-buttongroup-button\"\r\n                onClick={() => handleLogout()}\r\n                variant=\"contained\"\r\n                color={\"secondary\"}\r\n              >\r\n                Logout{\" \"}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          {selectedButton === 0 && <FriendRequestList />}\r\n          {selectedButton === 1 && <PenddingRequests />}\r\n          {selectedButton === 2 && <BlockedList />}\r\n          {selectedButton === 3 && <Setttings />}\r\n        </div>\r\n      )}\r\n      {conversationId && <OpenConversation />}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\features\\app.js",["109"],"import { createSlice } from \"@reduxjs/toolkit\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\nexport const appSlice = createSlice({\r\n  name: \"app\",\r\n  initialState: {\r\n    conversations: [],\r\n    selectedConversationIndex: -1,\r\n    PREFIX: \"groupchat-app-\",\r\n  },\r\n  reducers: {\r\n    setConversations: (state, action) => {\r\n      state.conversations = action.payload;\r\n    },\r\n    addConversation: (state, action) => {\r\n      state.conversations = [action.payload, ...state.conversations];\r\n    },\r\n    setSelectedConversation: (state, action) => {\r\n      state.selectedConversationIndex = action.payload;\r\n    },\r\n    addMessageinConversation: (state, action) => {\r\n      const { senderName, text, index } = action.payload;\r\n      let messages = state.conversations[index].messages;\r\n      state.conversations[index].messages = [\r\n        ...messages,\r\n        { sender: senderName, text },\r\n      ];\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setConversations,\r\n  addConversation,\r\n  setSelectedConversation,\r\n  addMessageinConversation,\r\n} = appSlice.actions;\r\n\r\nexport const selectApp = (state) => state.app;\r\nexport const selectConversations = (state) => state.app.conversations;\r\nexport const selectPrefix = (state) => state.app.PREFIX;\r\n\r\nexport default appSlice.reducer;\r\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\features\\friendsSlice.js",["110"],"import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nexport const friendsSlice = createSlice({\r\n  name: \"friends\",\r\n  initialState: {\r\n    friends: [],\r\n    friendRequests: [],\r\n    pendingRequests: [],\r\n    usersBlocked: [],\r\n  },\r\n  reducers: {\r\n    addFriend: (state, action) => {\r\n      const newFriend = action.payload.friend;\r\n      state.friends = [newFriend, ...state.friends];\r\n    },\r\n    addFriendRequest: (state, action) => {\r\n      const newRequest = action.payload.newFriendRequest;\r\n      const tempArray = state.friendRequests;\r\n      tempArray.unshift(newRequest);\r\n      state.friendRequests = tempArray;\r\n    },\r\n    addPendingRequest: (state, action) => {\r\n      const newPendingRequest = action.payload.relationship;\r\n      const tempArray = state.pendingRequests;\r\n      tempArray.unshift(newPendingRequest);\r\n      state.pendingRequests = tempArray;\r\n    },\r\n    addBlockedUser: (state, action) => {\r\n      const newUserBlocked = action.payload.relationship;\r\n      state.usersBlocked = [newUserBlocked, ...state.usersBlocked];\r\n    },\r\n    setFriends: (state, action) => {\r\n      state.friends = [...state.friends, ...action.payload];\r\n    },\r\n    setBlockedUsers: (state, action) => {\r\n      state.usersBlocked = [...state.usersBlocked, ...action.payload];\r\n    },\r\n    setPendingRequests: (state, action) => {\r\n      state.pendingRequests = [...state.pendingRequests, ...action.payload];\r\n    },\r\n    setFriendRequests: (state, action) => {\r\n      state.friendRequests = [...state.friendRequests, ...action.payload];\r\n    },\r\n    resetFriends: (state) => {\r\n      state.friends = state.friends.slice(0, 20);\r\n    },\r\n    resetFriendRequests: (state) => {\r\n      state.friendRequests = state.friendRequests.slice(0, 20);\r\n    },\r\n    resetPendingRequests: (state) => {\r\n      state.pendingRequests = state.pendingRequests.slice(0, 20);\r\n    },\r\n    deleteRelationship: (state, action) => {\r\n      const { relationshipId, type } = action.payload;\r\n\r\n      switch (type) {\r\n        case \"friends\":\r\n          state.friends = state.friends.filter(\r\n            (friend) => friend.id !== relationshipId\r\n          );\r\n          break;\r\n        case \"request_sender\":\r\n          state.pendingRequests = state.pendingRequests.filter(\r\n            (relationship) => relationship.id !== relationshipId\r\n          );\r\n          break;\r\n        case \"pending_second_first\":\r\n          state.friendRequests = state.friendRequests.filter(\r\n            (relationship) => relationship.id !== relationshipId\r\n          );\r\n          break;\r\n        case \"blocked_by_second\":\r\n        case \"blocked_by_first\":\r\n          state.usersBlocked = state.usersBlocked.filter(\r\n            (relationship) => relationship.id !== relationshipId\r\n          );\r\n          break;\r\n      }\r\n    },\r\n    removeAll: (state) => {\r\n      state.friends = [];\r\n      state.friendRequests = [];\r\n      state.pendingRequests = [];\r\n      state.usersBlocked = [];\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  addFriend,\r\n  addFriendRequest,\r\n  setFriends,\r\n  setFriendRequests,\r\n  setPendingRequests,\r\n  addPendingRequest,\r\n  resetFriends,\r\n  deleteRelationship,\r\n  resetFriendRequests,\r\n  removeAll,\r\n  addBlockedUser,\r\n  setBlockedUsers,\r\n  resetPendingRequests,\r\n} = friendsSlice.actions;\r\n\r\nexport const selectFriends = (state) => state.friends;\r\n\r\nexport default friendsSlice.reducer;\r\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\SideBar.js",["111"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport { useSocket } from \"../contexts/SocketProvider\";\r\nimport {\r\n  Tabs,\r\n  Tab,\r\n  Avatar,\r\n  Modal,\r\n  TextField,\r\n  Button,\r\n  Checkbox,\r\n} from \"@material-ui/core\";\r\nimport { TabPanel, TabContext } from \"@material-ui/lab\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"../css/SideBar.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { selectUser } from \"../features/user\";\r\nimport {\r\n  selectFriends,\r\n  resetFriends,\r\n  addPendingRequest,\r\n  addFriend,\r\n  deleteRelationship,\r\n} from \"../features/friendsSlice\";\r\nimport {\r\n  selectApp,\r\n  addConversation,\r\n  setSelectedConversation,\r\n} from \"../features/app\";\r\nimport { List } from \"react-virtualized\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport FriendsList from \"./FriendsList\";\r\nimport ConversationList from \"./ConversationsList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tabs: {\r\n    backgroundColor: \"#2f3136\",\r\n    width: 350,\r\n  },\r\n  paper: {\r\n    position: \"absolute\",\r\n    width: 400,\r\n    backgroundColor: \"#36393f\",\r\n    outline: \"none\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  modal: {\r\n    display: \"flex\",\r\n    padding: theme.spacing(2),\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n  },\r\n  small: {\r\n    width: theme.spacing(3),\r\n    height: theme.spacing(3),\r\n  },\r\n  tabPanel: {\r\n    padding: 0,\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nfunction SideBar({ name, user_id }) {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n  const classes = useStyles();\r\n  const modalInputRef = useRef();\r\n  const socket = useSocket();\r\n  const friends = useSelector(selectFriends);\r\n  const app = useSelector(selectApp);\r\n  const [friendsList, setFriendsList] = useState([]);\r\n  const [selectedTab, setSelectedTab] = useState(\"2\");\r\n  const [selectedFriends, setSelectedFriends] = useState([]);\r\n  const [openFriendModal, setOpenFriendModal] = useState(false);\r\n  const [openNewChatModal, setOpenNewChatModal] = useState(false);\r\n  const [modalMessage, setModalMessage] = useState(\"\");\r\n\r\n  const createConversation = (e) => {\r\n    e.preventDefault();\r\n    let recipients = [];\r\n    let conversationId = uuidv4();\r\n    selectedFriends.forEach((friend) => {\r\n      let newRecipient = { name: friend.name, id: friend.id };\r\n      recipients.push(newRecipient);\r\n    });\r\n    if (recipients.length > 0) {\r\n      app.selectedConversationIndex !== -1 &&\r\n        dispatch(setSelectedConversation(app.selectedConversationIndex + 1));\r\n      dispatch(\r\n        addConversation({ id: conversationId, recipients, messages: [] })\r\n      );\r\n      setOpenNewChatModal(false);\r\n      setSelectedFriends([]);\r\n    }\r\n  };\r\n\r\n  let clickHandler = () => {\r\n    setModalMessage(\"\");\r\n    selectedTab === \"2\" ? setOpenFriendModal(true) : setOpenNewChatModal(true);\r\n  };\r\n\r\n  let handleOpen = () => {\r\n    if (selectedTab === \"1\") {\r\n      setFriendsList(friends.friends.slice(0, 20));\r\n    }\r\n  };\r\n\r\n  let handleClose = () => {\r\n    selectedTab === \"2\"\r\n      ? setOpenFriendModal(false)\r\n      : setOpenNewChatModal(false);\r\n    if (selectedTab === \"1\") {\r\n      setFriendsList([]);\r\n      setSelectedFriends([]);\r\n    }\r\n  };\r\n\r\n  const changeTabHandler = (value) => {\r\n    setSelectedTab(value);\r\n    if (value === \"1\") {\r\n      dispatch(resetFriends());\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (socket == null) return;\r\n\r\n    socket.on(\r\n      \"friendRequestAccepted\",\r\n      (relationshipId, name, user_id, type) => {\r\n        let relationshipType =\r\n          type === \"receiver\" ? \"pending_second_first\" : \"request_sender\";\r\n\r\n        dispatch(\r\n          deleteRelationship({\r\n            relationshipId,\r\n            type: relationshipType,\r\n          })\r\n        );\r\n\r\n        dispatch(\r\n          addFriend({\r\n            friend: {\r\n              relationshipId,\r\n              name,\r\n              user_id,\r\n            },\r\n          })\r\n        );\r\n      }\r\n    );\r\n\r\n    return () => socket.off(\"friendRequestAccepted\");\r\n  }, [socket]);\r\n\r\n  let handleSendFriendRequest = (e) => {\r\n    e.preventDefault();\r\n    let user2 = modalInputRef.current.value;\r\n    let user1 = user.user;\r\n    socket.emit(\"sendFriendRequest\", user1.name, user1.id, user2);\r\n    socket.on(\"returnFriendRequestResponse\", function (message, name, id) {\r\n      if (!message) {\r\n        setOpenFriendModal(false);\r\n        dispatch(\r\n          addPendingRequest({\r\n            relationship: {\r\n              name,\r\n              id,\r\n            },\r\n          })\r\n        );\r\n      } else {\r\n        setModalMessage(message);\r\n      }\r\n      socket.off(\"returnFriendRequestResponse\");\r\n    });\r\n  };\r\n\r\n  const handleChangeCheckBox = (friendId, friendName) => {\r\n    setSelectedFriends((prev) => {\r\n      prev.filter((prevFriend) => prevFriend.id !== friendId);\r\n      if (containsFriend(prev, friendId)) {\r\n        return prev.filter((prevFriend) => {\r\n          return friendId !== prevFriend.id;\r\n        });\r\n      } else {\r\n        return [...prev, { id: friendId, name: friendName }];\r\n      }\r\n    });\r\n  };\r\n\r\n  const containsFriend = (friendsList, friendId) => {\r\n    let found = false;\r\n    for (let friend of friendsList) {\r\n      if (friend.id === friendId) {\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    return found;\r\n  };\r\n\r\n  const bodyNewChatModal = (\r\n    <div className={classes.paper}>\r\n      <form\r\n        action=\"submit\"\r\n        className=\"modal-form\"\r\n        onSubmit={(e) => {\r\n          createConversation(e);\r\n        }}\r\n      >\r\n        <div className=\"error\" style={{ margin: 8 }}>\r\n          {modalMessage}\r\n        </div>\r\n        <h3 style={{ margin: 8 }}>Create new chat</h3>\r\n        <List\r\n          width={350}\r\n          height={300}\r\n          rowHeight={50}\r\n          rowCount={friendsList.length}\r\n          // onScroll={(e) => handleScroll(e)}\r\n          rowRenderer={({ key, index, style, parent }) => {\r\n            let friend = friendsList[index];\r\n            return (\r\n              <div\r\n                style={style}\r\n                key={key}\r\n                className=\"modal_list_item\"\r\n                // onClick={(e) => handleClick(e, index)}\r\n              >\r\n                <Checkbox\r\n                  inputProps={{ \"aria-label\": \"Checkbox A\" }}\r\n                  onChange={() =>\r\n                    handleChangeCheckBox(friend.user_id, friend.name)\r\n                  }\r\n                  color=\"primary\"\r\n                />\r\n                {friendsList && (\r\n                  <>\r\n                    <div className=\"side_bar_modal_friends\">\r\n                      <p>{friend.name}</p>\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            );\r\n          }}\r\n        ></List>\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ margin: 8 }}\r\n        >\r\n          Create\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n  const bodyFriendModal = (\r\n    <div className={classes.paper}>\r\n      <form\r\n        action=\"submit\"\r\n        className=\"modal-form\"\r\n        onSubmit={(e) => {\r\n          handleSendFriendRequest(e);\r\n        }}\r\n      >\r\n        <div className=\"error\" style={{ margin: 8 }}>\r\n          {modalMessage}\r\n        </div>\r\n        <h3 style={{ margin: 8 }}>Send a request to</h3>\r\n        <TextField\r\n          className=\"modal-text-field\"\r\n          placeholder=\"Type the user name you want to add\"\r\n          variant=\"outlined\"\r\n          inputRef={modalInputRef}\r\n          style={{ margin: 8 }}\r\n        />\r\n        <Button\r\n          type=\"submit\"\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          style={{ margin: 8 }}\r\n        >\r\n          Send Friend Request\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={`sidebar`}>\r\n      <TabContext value={selectedTab}>\r\n        <div className=\"sidebar-tabs\">\r\n          {\" \"}\r\n          <div className=\"sidebar-tabs-container\">\r\n            {\" \"}\r\n            <Tabs\r\n              value={selectedTab}\r\n              variant=\"fullWidth\"\r\n              centered\r\n              onChange={(e, value) => changeTabHandler(value)}\r\n            >\r\n              <Tab label=\"Messages\" value=\"1\" />\r\n              <Tab label=\"Friends\" value=\"2\" />\r\n            </Tabs>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar-tabs-panel\">\r\n          <TabPanel value=\"1\" className={classes.tabPanel}>\r\n            <ConversationList />\r\n          </TabPanel>\r\n          <TabPanel value=\"2\" className={classes.tabPanel}>\r\n            <FriendsList></FriendsList>\r\n          </TabPanel>\r\n        </div>\r\n        <div className=\"sidebar-bottom-container\">\r\n          <div className=\"sidebar-avatar-wrapper\">\r\n            <Avatar>{name.charAt(0).toUpperCase()}</Avatar>\r\n            <div className=\"sidebar-avatar-info\">\r\n              <p>{name}</p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"sidebar-button\">\r\n          <Button\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            size={\"large\"}\r\n            fullWidth\r\n            onClick={() => clickHandler()}\r\n          >\r\n            {selectedTab === \"1\" ? \"Create new Chat\" : \"Add Friend\"}\r\n          </Button>\r\n        </div>\r\n      </TabContext>\r\n      <Modal\r\n        className={classes.modal}\r\n        open={openFriendModal}\r\n        onClose={handleClose}\r\n      >\r\n        {bodyFriendModal}\r\n      </Modal>\r\n      <Modal\r\n        className={classes.modal}\r\n        open={openNewChatModal}\r\n        onRendered={handleOpen}\r\n        onClose={handleClose}\r\n      >\r\n        {bodyNewChatModal}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SideBar;\r\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\OpenConversation.js",["112","113"],"import React, { useState, useRef, useEffect, useCallback } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { selectUser } from \"../features/user\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport {\r\n  selectApp,\r\n  selectConversations,\r\n  setSelectedConversation,\r\n  addMessageinConversation,\r\n} from \"../features/app\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useSocket } from \"../contexts/SocketProvider\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport \"../css/Conversation.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  fromMe: {\r\n    marginRight: 8,\r\n    marginLeft: \"auto\",\r\n  },\r\n  messageFromMe: {\r\n    backgroundColor: theme.palette.primary.main,\r\n    marginRight: 8,\r\n    marginLeft: \"auto\",\r\n  },\r\n}));\r\n\r\nfunction OpenConversation() {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const socket = useSocket();\r\n  const user = useSelector(selectUser);\r\n  const dispatch = useDispatch();\r\n  const { conversationId } = useParams();\r\n  const app = useSelector(selectApp);\r\n  const selectedConversationIndex = app.selectedConversationIndex;\r\n  const conversations = useSelector(selectConversations);\r\n  const messages = conversations[selectedConversationIndex]\r\n    ? conversations[selectedConversationIndex].messages\r\n    : [];\r\n  const messageRef = useRef();\r\n  const setRef = useCallback((node) => {\r\n    if (node) {\r\n      node.scrollIntoView({ smooth: true });\r\n    }\r\n  }, []);\r\n\r\n  const keyPressHandler = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      sendMessageHandler(e);\r\n    }\r\n  };\r\n\r\n  const sendMessageHandler = (e) => {\r\n    e.preventDefault();\r\n    const text = messageRef.current.value;\r\n    const recipients = conversations[selectedConversationIndex].recipients;\r\n    if (text) {\r\n      const senderName = user.user.name;\r\n      socket.emit(\"sendMessage\", {\r\n        recipients,\r\n        text,\r\n        senderName,\r\n        conversationId,\r\n      });\r\n      dispatch(\r\n        addMessageinConversation({\r\n          text,\r\n          senderName,\r\n          index: selectedConversationIndex,\r\n        })\r\n      );\r\n      messageRef.current.value = \"\";\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (selectedConversationIndex === -1) {\r\n      let index = 0;\r\n      let found = false;\r\n      for (let conversation of app.conversations) {\r\n        if (conversation.id === conversationId) {\r\n          dispatch(setSelectedConversation(index));\r\n          found = true;\r\n          break;\r\n        }\r\n        index++;\r\n      }\r\n      found || history.push(\"/dashboard\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"conversation\">\r\n      <div className=\"conversation_button_wrapper\">\r\n        <Button\r\n          className=\"conversation_close_button\"\r\n          inputRef={messageRef}\r\n          onClick={() => {\r\n            dispatch(setSelectedConversation(-1));\r\n            history.push(\"/dashboard\");\r\n          }}\r\n        >\r\n          Close Conversation\r\n        </Button>\r\n      </div>\r\n      <div className=\"conversation_chat_container\">\r\n        {messages.map((message, index) => {\r\n          const lastMessage = messages.length - 1 === index;\r\n          return (\r\n            <div\r\n              className={`message_container ${\r\n                message.sender === user.user.name ? classes.fromMe : \"\"\r\n              }`}\r\n              ref={lastMessage ? setRef : null}\r\n              key={index}\r\n            >\r\n              <div className=\"message_wrapper\">\r\n                <div\r\n                  className={`message_text_wrapper ${\r\n                    message.sender === user.user.name\r\n                      ? classes.messageFromMe\r\n                      : \"\"\r\n                  }`}\r\n                >\r\n                  <p className=\"message_text\">{message.text}</p>\r\n                </div>\r\n              </div>\r\n              <div\r\n                className={`message_sender_wrapper ${\r\n                  message.sender === user.user.name ? \"from_me\" : \"\"\r\n                }`}\r\n              >\r\n                <p>\r\n                  {message.sender === user.user.name ? \"You\" : message.sender}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <form\r\n        action=\"submit\"\r\n        className=\"conversation_text_container\"\r\n        onSubmit={(e) => sendMessageHandler(e)}\r\n      >\r\n        <TextField\r\n          className=\"conversation_message_input\"\r\n          placeholder=\"Write a message\"\r\n          inputRef={messageRef}\r\n          multiline\r\n          onKeyPress={keyPressHandler}\r\n          rowsMax={4}\r\n          style={{ margin: 5 }}\r\n          variant=\"outlined\"\r\n        />\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          size=\"large\"\r\n          type=\"submit\"\r\n          style={{ margin: 5 }}\r\n        >\r\n          SEND\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default OpenConversation;\r\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\FriendRequestList.js",["114"],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { green, grey } from \"@material-ui/core/colors\";\r\nimport {\r\n  selectFriends,\r\n  setFriendRequests,\r\n  deleteRelationship,\r\n  addBlockedUser,\r\n} from \"../features/friendsSlice\";\r\nimport { selectUser } from \"../features/user\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\nimport { useSocket } from \"../contexts/SocketProvider\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { fetchRequests, blockRelationship } from \"../utils/useFetch\";\r\nimport {\r\n  List,\r\n  AutoSizer,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  small: {\r\n    width: theme.spacing(4),\r\n    height: theme.spacing(4),\r\n    marginRight: 10,\r\n  },\r\n  accept: {\r\n    color: \"white\",\r\n    marginRight: 8,\r\n    backgroundColor: green[400],\r\n    \"&:hover\": {\r\n      background: green[500],\r\n    },\r\n  },\r\n  blockUser: {\r\n    color: \"white\",\r\n    marginLeft: 8,\r\n    backgroundColor: grey[800],\r\n    \"&:hover\": {\r\n      background: grey[500],\r\n    },\r\n  },\r\n}));\r\n\r\nfunction FriendRequestList() {\r\n  const cache = useRef(\r\n    new CellMeasurerCache({\r\n      fixedWidth: true,\r\n      defaultHeight: 50,\r\n    })\r\n  );\r\n  const socket = useSocket();\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n  const friends = useSelector(selectFriends);\r\n  const [loading, setLoading] = useState(false);\r\n  const [page, setPage] = useState(1);\r\n  const friendRequests = friends.friendRequests;\r\n  const classes = useStyles();\r\n  const numberPerPage = 20;\r\n\r\n  const handleScroll = (e) => {\r\n    const { scrollTop, clientHeight, scrollHeight } = e;\r\n    let bottom = Math.ceil(scrollHeight) - Math.round(scrollTop);\r\n    if (!loading) {\r\n      if (bottom === clientHeight) {\r\n        setPage((prev) => prev + 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  const addFriendHandler = async (id, receiverName, senderName) => {\r\n    console.log(\"USER ID\", user.user_id);\r\n    socket.emit(\"addFriend\", id, senderName, receiverName, user.user.user_id);\r\n  };\r\n\r\n  const blockUserhandler = async (id, name) => {\r\n    let response = await blockRelationship(id, \"blocked_by_second\");\r\n\r\n    if (response) {\r\n      dispatch(\r\n        deleteRelationship({\r\n          relationshipId: id,\r\n          type: \"pending_second_first\",\r\n        })\r\n      );\r\n      dispatch(\r\n        addBlockedUser({\r\n          relationship: {\r\n            id,\r\n            name,\r\n            type: \"blocked_by_second\",\r\n          },\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleDenyRequest = async (id) => {\r\n    socket.emit(\"deleteRelationShip\", id, \"pending_second_first\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadRequests = async () => {\r\n      let lastTimestamp = friendRequests[friendRequests.length - 1].timestamp;\r\n      setLoading(true);\r\n      const newFriendRequests = await fetchRequests(\r\n        user.user.id,\r\n        numberPerPage,\r\n        page,\r\n        \"friend_request\",\r\n        lastTimestamp\r\n      );\r\n      if (newFriendRequests) {\r\n        dispatch(setFriendRequests(newFriendRequests));\r\n      }\r\n      setLoading(false);\r\n    };\r\n    if (page > 1 && friendRequests.length > 0) {\r\n      loadRequests();\r\n    }\r\n  }, [page]);\r\n\r\n  return (\r\n    <div className=\"right-panel\">\r\n      <AutoSizer>\r\n        {({ width, height }) => (\r\n          <List\r\n            width={width}\r\n            height={height}\r\n            rowHeight={cache.current.rowHeight}\r\n            deferredMeasurementCache={cache.current}\r\n            rowCount={friendRequests.length}\r\n            onScroll={(e) => handleScroll(e)}\r\n            rowRenderer={({ key, index, style, parent }) => {\r\n              let request = friendRequests[index];\r\n              return (\r\n                <CellMeasurer\r\n                  key={key}\r\n                  cache={cache.current}\r\n                  parent={parent}\r\n                  columnIndex={0}\r\n                  rowIndex={index}\r\n                >\r\n                  <div style={style} className=\"list_item\">\r\n                    {friendRequests && (\r\n                      <div\r\n                        className=\"right-panel-friend-request-item\"\r\n                        key={request.id}\r\n                      >\r\n                        <Avatar\r\n                          className={classes.small}\r\n                          style={{ marginRight: 10 }}\r\n                        >\r\n                          {request.name.charAt(0).toUpperCase()}\r\n                        </Avatar>\r\n                        <p>{request.name}</p>\r\n                        <div className=\"friend-request-buttons-container\">\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.accept}\r\n                            onClick={() =>\r\n                              addFriendHandler(\r\n                                request.id,\r\n                                user.user.name,\r\n                                request.name\r\n                              )\r\n                            }\r\n                          >\r\n                            Accept\r\n                          </Button>\r\n\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            color=\"secondary\"\r\n                            size=\"small\"\r\n                            onClick={() => handleDenyRequest(request.id)}\r\n                            style={{ marginLeft: 8 }}\r\n                          >\r\n                            Deny\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            onClick={() =>\r\n                              blockUserhandler(request.id, request.name)\r\n                            }\r\n                            className={classes.blockUser}\r\n                          >\r\n                            Block\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </CellMeasurer>\r\n              );\r\n            }}\r\n          ></List>\r\n        )}\r\n      </AutoSizer>\r\n\r\n      {loading && <h1>Loading...</h1>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendRequestList;\r\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\Settings.js",[],"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\BlockedList.js",["115"],"import React, { useRef } from \"react\";\r\nimport { Avatar, Button } from \"@material-ui/core\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectFriends } from \"../features/friendsSlice\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { grey } from \"@material-ui/core/colors\";\r\nimport { useSocket } from \"../contexts/SocketProvider\";\r\nimport {\r\n  List,\r\n  AutoSizer,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  small: {\r\n    width: theme.spacing(4),\r\n    height: theme.spacing(4),\r\n    marginRight: 10,\r\n  },\r\n  unblock: {\r\n    color: \"white\",\r\n    marginLeft: 8,\r\n    backgroundColor: grey[800],\r\n    \"&:hover\": {\r\n      background: grey[500],\r\n    },\r\n  },\r\n}));\r\n\r\nconst handleScroll = (e) => {};\r\n\r\nfunction BlockedList() {\r\n  const cache = useRef(\r\n    new CellMeasurerCache({\r\n      fixedWidth: true,\r\n      defaultHeight: 50,\r\n    })\r\n  );\r\n  const socket = useSocket();\r\n  const friends = useSelector(selectFriends);\r\n  const blockedList = friends.usersBlocked;\r\n  const classes = useStyles();\r\n\r\n  const unblockUserHandler = (id, type) => {\r\n    socket.emit(\"deleteRelationShip\", id, type);\r\n  };\r\n\r\n  return (\r\n    <div className=\"right-panel\">\r\n      <AutoSizer>\r\n        {({ width, height }) => (\r\n          <List\r\n            width={width}\r\n            height={height}\r\n            rowHeight={cache.current.rowHeight}\r\n            deferredMeasurementCache={cache.current}\r\n            rowCount={blockedList.length}\r\n            onScroll={(e) => handleScroll(e)}\r\n            rowRenderer={({ key, index, style, parent }) => {\r\n              let blockedRelationship = blockedList[index];\r\n\r\n              return (\r\n                <CellMeasurer\r\n                  key={key}\r\n                  cache={cache.current}\r\n                  parent={parent}\r\n                  columnIndex={0}\r\n                  rowIndex={index}\r\n                >\r\n                  <div style={style} className=\"list_item\">\r\n                    {blockedList && (\r\n                      <div className=\"right_panel_blocked_user_item\">\r\n                        <Avatar\r\n                          className={classes.small}\r\n                          style={{ marginRgith: 10 }}\r\n                        >\r\n                          {blockedRelationship.name.charAt(0).toUpperCase()}\r\n                        </Avatar>\r\n                        <p>{blockedRelationship.name}</p>\r\n                        <div className=\"blocked_user_button_container\">\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            size=\"small\"\r\n                            className={classes.unblock}\r\n                            onClick={() =>\r\n                              unblockUserHandler(\r\n                                blockedRelationship.id,\r\n                                blockedRelationship.type\r\n                              )\r\n                            }\r\n                          >\r\n                            Unblock\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </CellMeasurer>\r\n              );\r\n            }}\r\n          ></List>\r\n        )}\r\n      </AutoSizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BlockedList;\r\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\PendingRequestsList.js",["116"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { selectFriends, setPendingRequests } from \"../features/friendsSlice\";\r\nimport { selectUser } from \"../features/user\";\r\nimport { Button, Avatar } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { useSocket } from \"../contexts/SocketProvider\";\r\nimport {\r\n  List,\r\n  AutoSizer,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\nimport { fetchRequests } from \"../utils/useFetch\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  small: {\r\n    width: theme.spacing(4),\r\n    height: theme.spacing(4),\r\n    marginRight: 10,\r\n  },\r\n}));\r\n\r\nfunction PendingRequestsList() {\r\n  const cache = useRef(\r\n    new CellMeasurerCache({\r\n      fixedWidth: true,\r\n      defaultHeight: 50,\r\n    })\r\n  );\r\n  const [page, setPage] = useState(1);\r\n  const socket = useSocket();\r\n  const classes = useStyles();\r\n  const user = useSelector(selectUser);\r\n  const friends = useSelector(selectFriends);\r\n  const dispatch = useDispatch();\r\n  const [loading, setLoading] = useState(false);\r\n  const pendingRequestsList = friends.pendingRequests;\r\n\r\n  const handleScroll = (e) => {\r\n    const { scrollTop, clientHeight, scrollHeight } = e;\r\n    let bottom = Math.ceil(scrollHeight) - Math.round(scrollTop);\r\n    if (!loading) {\r\n      if (bottom === clientHeight) {\r\n        setPage((prev) => prev + 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadRequests = async () => {\r\n      let lastTimestamp =\r\n        pendingRequestsList[pendingRequestsList.length - 1].timestamp;\r\n      setLoading(true);\r\n      const newPendingRequests = await fetchRequests(\r\n        user.user.id,\r\n        20,\r\n        page,\r\n        \"pending_request\",\r\n        lastTimestamp\r\n      );\r\n      console.log(\"NEW REQUEST\", newPendingRequests);\r\n      if (newPendingRequests) {\r\n        dispatch(setPendingRequests(newPendingRequests));\r\n      }\r\n      setLoading(false);\r\n    };\r\n    if (page > 1 && pendingRequestsList.length > 0) {\r\n      loadRequests();\r\n    }\r\n  }, [page]);\r\n\r\n  useEffect(() => {\r\n    // setpendingRequestsList(friends.pendingRequests);\r\n  }, [friends.pendingRequests]);\r\n\r\n  const handleCancelRequest = (id) => {\r\n    socket.emit(\"deleteRelationShip\", id, \"request_sender\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"right-panel\">\r\n      <AutoSizer>\r\n        {({ width, height }) => (\r\n          <List\r\n            width={width}\r\n            height={height}\r\n            onScroll={(e) => handleScroll(e)}\r\n            rowHeight={cache.current.rowHeight}\r\n            deferredMeasurementCache={cache.current}\r\n            rowCount={pendingRequestsList.length}\r\n            rowRenderer={({ key, index, style, parent }) => {\r\n              let request = pendingRequestsList[index];\r\n              return (\r\n                <CellMeasurer\r\n                  key={key}\r\n                  cache={cache.current}\r\n                  parent={parent}\r\n                  columnIndex={0}\r\n                  rowIndex={index}\r\n                >\r\n                  <div style={style} className=\"liste_item\">\r\n                    <div className=\"right-panel-pending-request-item\">\r\n                      <Avatar className={classes.small}>\r\n                        {request.name.charAt(0).toUpperCase()}\r\n                      </Avatar>\r\n                      <p>{request.name}</p>\r\n                      <div className=\"pending-request-button-container\">\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          color=\"secondary\"\r\n                          size=\"small\"\r\n                          onClick={() => {\r\n                            handleCancelRequest(request.id);\r\n                          }}\r\n                        >\r\n                          Cancel Request\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </CellMeasurer>\r\n              );\r\n            }}\r\n          ></List>\r\n        )}\r\n      </AutoSizer>\r\n      {loading && <h1>Loading...</h1>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PendingRequestsList;\r\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\utils\\useFetch.js",[],"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\ConversationsList.js",["117"],"import React, { useEffect, useRef } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { selectApp, setSelectedConversation } from \"../features/app\";\r\nimport {\r\n  List,\r\n  AutoSizer,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\n\r\nfunction ConversationsList() {\r\n  const history = useHistory();\r\n  const app = useSelector(selectApp);\r\n  const dispatch = useDispatch();\r\n  const conversations = app.conversations;\r\n  const cache = useRef(\r\n    new CellMeasurerCache({\r\n      fixedWidth: true,\r\n      defaultHeight: 50,\r\n    })\r\n  );\r\n\r\n  const clickHandler = (id, index) => {\r\n    dispatch(setSelectedConversation(index));\r\n    history.push(`/dashboard/${id}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"conversations\">\r\n      <AutoSizer>\r\n        {({ width, height }) => (\r\n          <List\r\n            width={width}\r\n            height={height}\r\n            rowHeight={cache.current.rowHeight}\r\n            rowCount={conversations.length}\r\n            rowRenderer={({ key, index, style, parent }) => {\r\n              let conversation = conversations[index];\r\n              return (\r\n                <CellMeasurer\r\n                  key={key}\r\n                  cache={cache.current}\r\n                  parent={parent}\r\n                  columnIndex={0}\r\n                  rowIndex={index}\r\n                >\r\n                  <div\r\n                    style={style}\r\n                    className={`list_item_wrapper ${\r\n                      index === app.selectedConversationIndex\r\n                        ? \"selected_conversation\"\r\n                        : \"\"\r\n                    }`}\r\n                    onClick={() => clickHandler(conversation.id, index)}\r\n                  >\r\n                    {conversations.length > 0 && (\r\n                      <>\r\n                        <div className=\"conversations_list_item\">\r\n                          {conversation.recipients.map((recipient, index) => {\r\n                            return (\r\n                              <div className=\"conversation_list_recipients\">\r\n                                <span>{recipient.name}</span>\r\n                              </div>\r\n                            );\r\n                          })}{\" \"}\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </CellMeasurer>\r\n              );\r\n            }}\r\n          ></List>\r\n        )}\r\n      </AutoSizer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ConversationsList;\r\n","C:\\Users\\espkh\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\FriendsList.js",["118"],"import React, { useEffect, useState, useRef } from \"react\";\r\nimport { useSocket } from \"../contexts/SocketProvider\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Avatar } from \"@material-ui/core\";\r\nimport {\r\n  selectFriends,\r\n  setFriends,\r\n  deleteRelationship,\r\n  addBlockedUser,\r\n} from \"../features/friendsSlice\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { selectUser } from \"../features/user\";\r\nimport { Menu, MenuItem, Fade } from \"@material-ui/core\";\r\nimport { fetchFriends, blockFriend } from \"../utils/useFetch\";\r\nimport {\r\n  List,\r\n  AutoSizer,\r\n  CellMeasurer,\r\n  CellMeasurerCache,\r\n} from \"react-virtualized\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  small: {\r\n    width: theme.spacing(4),\r\n    height: theme.spacing(4),\r\n    marginRight: 10,\r\n  },\r\n}));\r\n\r\nfunction FriendsList({ isCreatingChat }) {\r\n  const friendListRef = useRef();\r\n  const friends = useSelector(selectFriends);\r\n  const friendsList = friends.friends;\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n  const socket = useSocket();\r\n  const numberPerPage = 40;\r\n  const [selectedFriend, setSelectedFriend] = useState(-1);\r\n  const [page, setPage] = useState(1);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n  const open = Boolean(anchorEl);\r\n  const [loading, setLoading] = useState(false);\r\n  const cache = useRef(\r\n    new CellMeasurerCache({\r\n      fixedWidth: true,\r\n      defaultHeight: 50,\r\n    })\r\n  );\r\n\r\n  const handleClick = (event, index) => {\r\n    setAnchorEl(event.currentTarget);\r\n    setSelectedFriend(index);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setSelectedFriend(-1);\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const deleteFriendHandler = (id) => {\r\n    socket.emit(\"deleteRelationShip\", id, \"friends\");\r\n    setSelectedFriend(-1);\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const blockFriendHandler = async (relationshipId, userId, friendName) => {\r\n    let response = await blockFriend(relationshipId, userId);\r\n    if (response) {\r\n      console.log(response);\r\n      dispatch(deleteRelationship({ relationshipId, type: \"friends\" }));\r\n      dispatch(\r\n        addBlockedUser({\r\n          relationship: {\r\n            id: relationshipId,\r\n            name: friendName,\r\n            type: response,\r\n          },\r\n        })\r\n      );\r\n      setSelectedFriend(-1);\r\n      setAnchorEl(null);\r\n    }\r\n  };\r\n\r\n  const handleScroll = (e) => {\r\n    const { scrollTop, clientHeight, scrollHeight } = e;\r\n    let bottom = Math.ceil(scrollHeight) - Math.round(scrollTop);\r\n    if (!loading) {\r\n      if (bottom === clientHeight) {\r\n        setPage((prev) => prev + 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const loadFriends = async () => {\r\n      let lastTimestamp = friendsList[friendsList.length - 1].timestamp;\r\n      setLoading(true);\r\n      const newFriends = await fetchFriends(\r\n        user.user.id,\r\n        numberPerPage,\r\n        page,\r\n        lastTimestamp\r\n      );\r\n      if (newFriends) {\r\n        dispatch(setFriends(newFriends));\r\n      }\r\n      setLoading(false);\r\n    };\r\n    if (page > 1 && friendsList.length > 0) {\r\n      loadFriends();\r\n    }\r\n  }, [page]);\r\n\r\n  return (\r\n    <div className=\"friends_list\" ref={friendListRef}>\r\n      <AutoSizer>\r\n        {({ width, height }) => (\r\n          <List\r\n            width={width}\r\n            height={height}\r\n            rowHeight={cache.current.rowHeight}\r\n            deferredMeasurementCache={cache.current}\r\n            rowCount={friendsList.length}\r\n            onScroll={(e) => handleScroll(e)}\r\n            rowRenderer={({ key, index, style, parent }) => {\r\n              let friend = friendsList[index];\r\n              return (\r\n                <CellMeasurer\r\n                  key={key}\r\n                  cache={cache.current}\r\n                  parent={parent}\r\n                  columnIndex={0}\r\n                  rowIndex={index}\r\n                >\r\n                  <div\r\n                    style={style}\r\n                    className=\"list_item\"\r\n                    onClick={(e) => handleClick(e, index)}\r\n                  >\r\n                    {friendsList && (\r\n                      <>\r\n                        <div\r\n                          className={`side_bar_friend_list_item ${\r\n                            selectedFriend === index ? \"selected_friend\" : \"\"\r\n                          }`}\r\n                        >\r\n                          <Avatar\r\n                            className={classes.small}\r\n                            style={{ marginRight: 10 }}\r\n                          >\r\n                            {friend.name.charAt(0).toUpperCase()}\r\n                          </Avatar>\r\n                          <p>{friend.name}</p>\r\n                        </div>\r\n                      </>\r\n                    )}\r\n                  </div>\r\n                </CellMeasurer>\r\n              );\r\n            }}\r\n          ></List>\r\n        )}\r\n      </AutoSizer>\r\n      <Menu\r\n        id=\"friend_pop_up\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Fade}\r\n      >\r\n        <MenuItem\r\n          onClick={() => deleteFriendHandler(friendsList[selectedFriend].id)}\r\n        >\r\n          Delete Friend\r\n        </MenuItem>\r\n        <MenuItem\r\n          onClick={() =>\r\n            blockFriendHandler(\r\n              friendsList[selectedFriend].id,\r\n              user.user.id,\r\n              friendsList[selectedFriend].name\r\n            )\r\n          }\r\n        >\r\n          Block User\r\n        </MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default FriendsList;\r\n",["119","120"],{"ruleId":"121","replacedBy":"122"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","severity":1,"message":"126","line":3,"column":10,"nodeType":"127","messageId":"128","endLine":3,"endColumn":16},{"ruleId":"125","severity":1,"message":"129","line":3,"column":23,"nodeType":"127","messageId":"128","endLine":3,"endColumn":28},{"ruleId":"130","severity":1,"message":"131","line":58,"column":6,"nodeType":"132","endLine":58,"endColumn":8,"suggestions":"133"},{"ruleId":"125","severity":1,"message":"134","line":13,"column":7,"nodeType":"127","messageId":"128","endLine":13,"endColumn":14},{"ruleId":"130","severity":1,"message":"135","line":56,"column":6,"nodeType":"132","endLine":56,"endColumn":8,"suggestions":"136"},{"ruleId":"130","severity":1,"message":"137","line":103,"column":6,"nodeType":"132","endLine":103,"endColumn":8,"suggestions":"138"},{"ruleId":"130","severity":1,"message":"131","line":190,"column":6,"nodeType":"132","endLine":190,"endColumn":34,"suggestions":"139"},{"ruleId":"125","severity":1,"message":"140","line":2,"column":8,"nodeType":"127","messageId":"128","endLine":2,"endColumn":23},{"ruleId":"141","severity":1,"message":"142","line":56,"column":7,"nodeType":"143","messageId":"144","endLine":78,"endColumn":8},{"ruleId":"130","severity":1,"message":"131","line":154,"column":6,"nodeType":"132","endLine":154,"endColumn":14,"suggestions":"145"},{"ruleId":"125","severity":1,"message":"146","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"130","severity":1,"message":"147","line":91,"column":6,"nodeType":"132","endLine":91,"endColumn":8,"suggestions":"148"},{"ruleId":"130","severity":1,"message":"149","line":123,"column":6,"nodeType":"132","endLine":123,"endColumn":12,"suggestions":"150"},{"ruleId":"125","severity":1,"message":"151","line":3,"column":23,"nodeType":"127","messageId":"128","endLine":3,"endColumn":34},{"ruleId":"130","severity":1,"message":"152","line":71,"column":6,"nodeType":"132","endLine":71,"endColumn":12,"suggestions":"153"},{"ruleId":"125","severity":1,"message":"154","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":26},{"ruleId":"130","severity":1,"message":"155","line":114,"column":6,"nodeType":"132","endLine":114,"endColumn":12,"suggestions":"156"},{"ruleId":"121","replacedBy":"157"},{"ruleId":"123","replacedBy":"158"},"no-native-reassign",["159"],"no-negated-in-lhs",["160"],"no-unused-vars","'purple' is defined but never used.","Identifier","unusedVar","'green' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["161"],"'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'user.user'. Either include it or remove the dependency array.",["162"],"React Hook useEffect has missing dependencies: 'dispatch', 'history', 'prefixedKey', and 'user.user'. Either include them or remove the dependency array.",["163"],["164"],"'useLocalStorage' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase",["165"],"'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'app.conversations', 'conversationId', 'dispatch', 'history', and 'selectedConversationIndex'. Either include them or remove the dependency array.",["166"],"React Hook useEffect has missing dependencies: 'dispatch', 'friendRequests', and 'user.user.id'. Either include them or remove the dependency array.",["167"],"'useDispatch' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'pendingRequestsList', and 'user.user.id'. Either include them or remove the dependency array.",["168"],"'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'friendsList', and 'user.user.id'. Either include them or remove the dependency array.",["169"],["159"],["160"],"no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},{"desc":"180","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},"Update the dependencies array to be: [dispatch]",{"range":"188","text":"189"},"Update the dependencies array to be: [user.user]",{"range":"190","text":"191"},"Update the dependencies array to be: [dispatch, history, prefixedKey, user.user]",{"range":"192","text":"193"},"Update the dependencies array to be: [socket, app, conversations, dispatch]",{"range":"194","text":"195"},"Update the dependencies array to be: [dispatch, socket]",{"range":"196","text":"197"},"Update the dependencies array to be: [app.conversations, conversationId, dispatch, history, selectedConversationIndex]",{"range":"198","text":"199"},"Update the dependencies array to be: [dispatch, friendRequests, page, user.user.id]",{"range":"200","text":"201"},"Update the dependencies array to be: [dispatch, page, pendingRequestsList, user.user.id]",{"range":"202","text":"203"},"Update the dependencies array to be: [dispatch, friendsList, page, user.user.id]",{"range":"204","text":"205"},[1567,1569],"[dispatch]",[1815,1817],"[user.user]",[3076,3078],"[dispatch, history, prefixedKey, user.user]",[5329,5357],"[socket, app, conversations, dispatch]",[4082,4090],"[dispatch, socket]",[2611,2613],"[app.conversations, conversationId, dispatch, history, selectedConversationIndex]",[3290,3296],"[dispatch, friendRequests, page, user.user.id]",[2110,2116],"[dispatch, page, pendingRequestsList, user.user.id]",[3184,3190],"[dispatch, friendsList, page, user.user.id]"]