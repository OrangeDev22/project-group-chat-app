[{"C:\\Users\\bh02\\Documents\\GitHub\\project-group-chat-app\\client\\src\\index.js":"1","C:\\Users\\bh02\\Documents\\GitHub\\project-group-chat-app\\client\\src\\reportWebVitals.js":"2","C:\\Users\\bh02\\Documents\\GitHub\\project-group-chat-app\\client\\src\\App.js":"3","C:\\Users\\bh02\\Documents\\GitHub\\project-group-chat-app\\client\\src\\hooks\\useLocalStorage.js":"4","C:\\Users\\bh02\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\Register.js":"5"},{"size":555,"mtime":1610063961224,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":991,"mtime":1610151845677,"results":"9","hashOfConfig":"7"},{"size":660,"mtime":1609810396774,"results":"10","hashOfConfig":"7"},{"size":4572,"mtime":1610148776067,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"1rj0bv7",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"15"},"C:\\Users\\bh02\\Documents\\GitHub\\project-group-chat-app\\client\\src\\index.js",["25","26"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["27","28"],"C:\\Users\\bh02\\Documents\\GitHub\\project-group-chat-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\project-group-chat-app\\client\\src\\App.js",["29"],"C:\\Users\\bh02\\Documents\\GitHub\\project-group-chat-app\\client\\src\\hooks\\useLocalStorage.js",[],"C:\\Users\\bh02\\Documents\\GitHub\\project-group-chat-app\\client\\src\\components\\Register.js",["30","31","32","33","34","35","36"],"import React, { useRef, useState } from \"react\";\r\nimport { Button, TextField, Container } from \"@material-ui/core\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport \"./Register.css\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    border: 0,\r\n    borderRadius: 15,\r\n    color: \"white\",\r\n  },\r\n}));\r\n\r\nfunction Register({ id, onIdSubmit }) {\r\n  const classes = useStyles();\r\n  const idRef = useRef();\r\n  const NAME_ERROR = 400,\r\n    EMAIL_ERROR = 401,\r\n    PASSWORD_ERROR = 401,\r\n    PASSWORD2_ERROR = 402;\r\n  const formRef = useRef();\r\n  const [name, setName] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [password2, setPassword2] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n  const [errorMessages, setErrorMessages] = useState([]);\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!name || !email || !password || !password2 || name.includes(\" \")) {\r\n      setError(true);\r\n      let message = name.includes(\" \")\r\n        ? \"Name format not valid\"\r\n        : \"Please verify your fields\";\r\n      setErrorMessages([{ message }]);\r\n    } else {\r\n      setError(false);\r\n      setErrorMessages([]);\r\n      let user_id = uuidv4();\r\n      try {\r\n        const body = {\r\n          name: name,\r\n          email: email,\r\n          user_id: user_id,\r\n          password: password,\r\n          password2: password2,\r\n        };\r\n        const response = await fetch(\"http://localhost:5000/users/register\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(body),\r\n        });\r\n        const jsonData = await response.json();\r\n        if (jsonData.length > 0) {\r\n          setErrorMessages(jsonData);\r\n        } else {\r\n          console.log(\"submit working\");\r\n          setName(\"\");\r\n          setEmail(\"\");\r\n          setPassword(\"\");\r\n          setPassword2(\"\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"error\", error.message);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"register\">\r\n      <LockOutlinedIcon\r\n        fontSize=\"large\"\r\n        className=\"register-icon\"\r\n        style={{\r\n          margin: \"10px\",\r\n          alignSelf: \"center\",\r\n          backgroundColor: \"#7e57c2\",\r\n          padding: \"10px\",\r\n          borderRadius: \"50%\",\r\n        }}\r\n      />\r\n      <form\r\n        noValidate\r\n        autoComplete=\"off\"\r\n        action=\"submit\"\r\n        onSubmit={(e) => handleSubmit(e)}\r\n        className=\"register-form\"\r\n        ref={formRef}\r\n      >\r\n        <div className=\"\">\r\n          {errorMessages.map((error, index) => (\r\n            <p className=\"register-element error\" key={index}>\r\n              {error.message}\r\n            </p>\r\n          ))}\r\n        </div>\r\n\r\n        <TextField\r\n          className=\"register-element\"\r\n          error={error}\r\n          required\r\n          id=\"outlined-required\"\r\n          placeholder=\"User Name\"\r\n          variant=\"outlined\"\r\n          value={name}\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n        <TextField\r\n          className=\"register-element\"\r\n          error={error}\r\n          required\r\n          id=\"outlined-required\"\r\n          placeholder=\"Email\"\r\n          variant=\"outlined\"\r\n          value={email}\r\n          type=\"email\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n        <TextField\r\n          className=\"register-element\"\r\n          error={error}\r\n          required\r\n          id=\"outlined-required\"\r\n          placeholder=\"Password\"\r\n          variant=\"outlined\"\r\n          value={password}\r\n          type=\"password\"\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <TextField\r\n          className=\"register-element\"\r\n          error={error}\r\n          required\r\n          value={password2}\r\n          id=\"outlined-required\"\r\n          placeholder=\"Repeat Password\"\r\n          type=\"password\"\r\n          variant=\"outlined\"\r\n          onChange={(e) => setPassword2(e.target.value)}\r\n        />\r\n\r\n        <div className=\"register-button-container\">\r\n          <Button\r\n            type=\"submit\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            size={\"large\"}\r\n            className=\"register-element\"\r\n          >\r\n            Create User\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n",{"ruleId":"37","severity":1,"message":"38","line":5,"column":10,"nodeType":"39","messageId":"40","endLine":5,"endColumn":21},{"ruleId":"37","severity":1,"message":"41","line":6,"column":10,"nodeType":"39","messageId":"40","endLine":6,"endColumn":18},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"37","severity":1,"message":"46","line":1,"column":17,"nodeType":"39","messageId":"40","endLine":1,"endColumn":25},{"ruleId":"37","severity":1,"message":"47","line":2,"column":29,"nodeType":"39","messageId":"40","endLine":2,"endColumn":38},{"ruleId":"37","severity":1,"message":"48","line":17,"column":9,"nodeType":"39","messageId":"40","endLine":17,"endColumn":16},{"ruleId":"37","severity":1,"message":"49","line":18,"column":9,"nodeType":"39","messageId":"40","endLine":18,"endColumn":14},{"ruleId":"37","severity":1,"message":"50","line":19,"column":9,"nodeType":"39","messageId":"40","endLine":19,"endColumn":19},{"ruleId":"37","severity":1,"message":"51","line":20,"column":5,"nodeType":"39","messageId":"40","endLine":20,"endColumn":16},{"ruleId":"37","severity":1,"message":"52","line":21,"column":5,"nodeType":"39","messageId":"40","endLine":21,"endColumn":19},{"ruleId":"37","severity":1,"message":"53","line":22,"column":5,"nodeType":"39","messageId":"40","endLine":22,"endColumn":20},"no-unused-vars","'createStore' is defined but never used.","Identifier","unusedVar","'Provider' is defined but never used.","no-native-reassign",["54"],"no-negated-in-lhs",["55"],"'useState' is defined but never used.","'Container' is defined but never used.","'classes' is assigned a value but never used.","'idRef' is assigned a value but never used.","'NAME_ERROR' is assigned a value but never used.","'EMAIL_ERROR' is assigned a value but never used.","'PASSWORD_ERROR' is assigned a value but never used.","'PASSWORD2_ERROR' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]